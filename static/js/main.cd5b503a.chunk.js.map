{"version":3,"sources":["components/Counter/Controls.js","redux/counter/counter-types.js","components/Counter/Value.js","components/Counter/Counter.js","redux/counter/counter-actions.js","App.js","redux/counter/counter-reducer.js","redux/store.js","index.js"],"names":["Controls","step","onIncrement","onDecrement","className","type","onClick","INCREMENT","DECREMENT","Value","value","connect","state","counter","dispatch","actionTypes","payload","actions","App","todos","initialTodos","deleteTodo","todoId","setState","prevState","filter","todo","id","Component","combineReducers","DEgitCREMENT","rootReducer","counterReducer","store","createStore","composeWithDevTools","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"woBAaeA,EAXE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,YAAtB,OACf,sBAAKC,UAAU,oBAAf,UACE,yBAAQC,KAAK,SAASC,QAASH,EAA/B,iFACgBF,KAEhB,yBAAQI,KAAK,SAASC,QAASJ,EAA/B,iFACgBD,SCLL,GAAEM,UAHC,oBAGUC,UAFV,qBCGHC,EAFD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAe,sBAAMN,UAAU,iBAAhB,SAAkCM,K,MC8D/D,IAeeC,eAfS,SAAAC,GACtB,MAAO,CACLF,MAAOE,EAAMC,QAAQH,MACrBT,KAAMW,EAAMC,QAAQZ,SAIG,SAACa,GAAD,MAAe,CAEtCZ,YAAa,SAACQ,GAAD,OAAWI,ECvEH,SAACJ,GAAD,MAAY,CACnCL,KAAMU,EAAYR,UAClBS,QAASN,GDqE0BO,CAAkBP,KACnDP,YAAa,SAACO,GAAD,OAAWI,ECnEH,SAACJ,GAAD,MAAY,CACnCL,KAAMU,EAAYP,UAClBQ,QAASN,GDiE0BO,CAAkBP,QAKxCC,EA5Bf,YAA2D,IAAzCD,EAAwC,EAAxCA,MAAOT,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,YAC1C,OACE,sBAAKC,UAAU,UAAf,UACE,cAAC,EAAD,CAAOM,MAAOA,IACd,cAAC,EAAD,CACET,KAAMA,EACNC,YAAa,kBAAMA,EAAYD,IAC/BE,YAAa,kBAAMA,EAAYF,Y,QEHxBiB,E,4MAtCbN,MAAQ,CACNO,MAAOC,G,EAGTC,WAAa,SAAAC,GACX,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BL,MAAOK,EAAUL,MAAMM,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,U,4CAItD,WASE,OACE,qCACE,qJAEA,cAAC,EAAD,W,GAxBUM,a,eCEHC,4BAAgB,CAC7BnB,MAhBmB,WAAmC,IAAlCE,EAAiC,uDAAzB,EAAyB,yCAApBP,EAAoB,EAApBA,KAAMW,EAAc,EAAdA,QACvC,OAAQX,GACN,KAAKU,EAAYR,UACf,OAAOK,EAAQI,EAEjB,KAAKD,EAAYe,aACf,OAAOlB,EAAQI,EAEjB,QACE,OAAOJ,IAQXX,KAJkB,eAACW,EAAD,uDAAS,EAAT,OAAuBA,KCuErCmB,EAAcF,0BAAgB,CAClChB,QAASmB,IAKIC,EAFDC,sBAAYH,EAAaI,iC,YClFvCC,QAAQC,IAAIJ,EAAMK,YAGlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.cd5b503a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Controls = ({ step, onIncrement, onDecrement }) => (\n  <div className=\"Counter__controls\">\n    <button type=\"button\" onClick={onDecrement}>\n      Уменьшить на {step}\n    </button>\n    <button type=\"button\" onClick={onIncrement}>\n      Увеличить на {step}\n    </button>\n  </div>\n);\n\nexport default Controls;\n","const INCREMENT = \"counter/Increment\";\r\nconst DECREMENT = \"counter/Decrement\";\r\n\r\nexport default { INCREMENT, DECREMENT };","import React from 'react';\n\nconst Value = ({ value }) => <span className=\"Counter__value\">{value}</span>;\n\nexport default Value;\n","import React, { Component } from 'react';\nimport { connect} from 'react-redux'\nimport Controls from './Controls';\nimport * as actions from '../../redux/counter/counter-actions'\nimport Value from './Value';\nimport './Counter.css';\n\n// class Counter extends Component {\n//   static defaultProps = {\n//     initialValue: 0,\n//   };\n\n//   static propTypes = {\n//     //\n//   };\n\n//   state = {\n//     value: this.props.initialValue,\n//   };\n\n//   handleIncrement = () => {\n//     this.setState(prevState => ({\n//       value: prevState.value + 1,\n//     }));\n//   };\n\n//   handleDecrement = () => {\n//     this.setState(prevState => ({\n//       value: prevState.value - 1,\n//     }));\n//   };\n\n//   render() {\n//     const { value } = this.state;\n\n//     return (\n//       <div className=\"Counter\">\n//         <Value value={value} />\n\n//         <Controls\n//           onIncrement={this.handleIncrement}\n//           onDecrement={this.handleDecrement}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// export default Counter;\n\n\nfunction Counter({value, step, onIncrement, onDecrement}) {\n  return (\n    <div className=\"Counter\">\n      <Value value={value} />\n      <Controls\n        step={step}\n        onIncrement={() => onIncrement(step)}\n        onDecrement={() => onDecrement(step)}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    value: state.counter.value,\n    step: state.counter.step,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n \n    onIncrement: (value) => dispatch(actions.increment(value)),\n    onDecrement: (value) => dispatch(actions.decrement(value)),\n \n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","import actionTypes from './counter-types'\r\n\r\nexport const increment = (value) => ({\r\n  type: actionTypes.INCREMENT,\r\n  payload: value,\r\n});\r\n\r\nexport const decrement = (value) => ({\r\n  type: actionTypes.DECREMENT,\r\n  payload: value,\r\n});\r\n","import React, { Component } from 'react';\nimport Counter from './components/Counter';\n// import Dropdown from './components/Dropdown';\n// import ColorPicker from './components/ColorPicker';\n// import TodoList from './components/TodoList';\nimport initialTodos from './todos.json';\n\n// const colorPickerOptions = [\n//   { label: 'red', color: '#F44336' },\n//   { label: 'green', color: '#4CAF50' },\n//   { label: 'blue', color: '#2196F3' },\n//   { label: 'grey', color: '#607D8B' },\n//   { label: 'pink', color: '#E91E63' },\n//   { label: 'indigo', color: '#3F51B5' },\n// ];\n\nclass App extends Component {\n  state = {\n    todos: initialTodos,\n  };\n\n  deleteTodo = todoId => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  render() {\n    // const { todos } = this.state;\n\n    // const totalTodoCount = todos.length;\n    // const completedTodoCount = todos.reduce(\n    //   (total, todo) => (todo.completed ? total + 1 : total),\n    //   0,\n    // );\n\n    return (\n      <>\n        <h1>Состояние компонента</h1>\n\n        <Counter  />\n        {/* <Dropdown /> */}\n        {/* <ColorPicker options={colorPickerOptions} /> */}\n\n        {/* <div>\n          <p>Общее кол-во: {totalTodoCount}</p>\n          <p>Кол-во выполненных: {completedTodoCount}</p>\n        </div> */}\n\n        {/* <TodoList todos={todos} onDeleteTodo={this.deleteTodo} /> */}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport actionTypes from \"./counter-types\";\r\n\r\nconst valueReducer = (state = 0, { type, payload }) => {\r\n  switch (type) {\r\n    case actionTypes.INCREMENT:\r\n      return state + payload;\r\n\r\n    case actionTypes.DEgitCREMENT:\r\n      return state - payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst stepReducer = (state = 5, action) => state;\r\n\r\nexport default combineReducers({\r\n  value: valueReducer,\r\n  step: stepReducer,\r\n});\r\n","import { createStore, combineReducers } from 'redux'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport counterReducer from './counter/counter-reducer'\r\n\r\nconst initialState = {\r\n    counter: {\r\n        value: 0,\r\n        step: 1,\r\n    }\r\n\r\n}\r\n\r\n// const reducer = (state = initialState, {type, payload}) => {\r\n//     switch (type) {\r\n//   case \"counter/Increment\":\r\n//     return {\r\n//         ...state,\r\n//         counter: {\r\n//             ...state.counter,\r\n//             value: state.counter.value + payload,\r\n//         }\r\n      \r\n//     };\r\n\r\n//   case \"counter/Decrement\":\r\n//     return {\r\n//       ...state,\r\n//       counter: {\r\n//         ...state.counter,\r\n//         value: state.counter.value - payload,\r\n//       },\r\n//     };\r\n\r\n//   default:\r\n//     return state;\r\n// }\r\n// }\r\n\r\nconst counterInitialState = {\r\n      value: 0,\r\n        step: 1,\r\n    }\r\n\r\n\r\n//     const valueReducer = (state=0,  {type, payload }) =>  {\r\n//         switch (type) {\r\n//   case \"counter/Increment\":\r\n//     return state + payload;\r\n \r\n//   case \"counter/Decrement\":\r\n//    return state - payload;\r\n\r\n//   default:\r\n//     return state;\r\n// }\r\n//     };\r\n\r\n\r\n//     const stepReducer = (state=5, action) => state;\r\n\r\n\r\n// const counterReducer =(state =counterInitialState, {type, payload }) =>  {\r\n// switch (type) {\r\n//   case \"counter/Increment\":\r\n//     return {\r\n//       ...state,\r\n//       value: state.value + payload,\r\n//     };\r\n\r\n//   case \"counter/Decrement\":\r\n//     return {\r\n//       ...state,\r\n//       value: state.value - payload,\r\n//     };\r\n\r\n//   default:\r\n//     return state;\r\n// }\r\n// }\r\n\r\n// const counterReducer = combineReducers( \r\n//     {\r\n//         value: valueReducer,\r\n//         step: stepReducer\r\n//     }\r\n// )\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { myAction} from \"./redux/actions\";\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nconsole.log(store.getState())\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}